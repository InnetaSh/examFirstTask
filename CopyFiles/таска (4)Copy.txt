Разработать многопоточную систему, *******оторая симулирует процесс обработ*******и данных на фабри*******е. В системе нес*******оль*******о пото*******ов, *******аждый из *******оторых выполняет одну из следующих ролей:

Производители: создают данные с разной с*******оростью.
Обработчи*******и: берут данные от производителей и обрабатывают их (например, преобразуют их *******а*******им-либо образом).
Потребители: получают обработанные данные и записывают их в финальный списо*******.
Каждая из этих ролей должна быть представлена отдельным набором пото*******ов, и они должны *******орре*******тно взаимодействовать друг с другом.

Основные требования:
Производители:

Каждый производитель генерирует данные с не*******оторой случайной задерж*******ой и передаёт их в общий буфер.
Данные представляют собой уни*******альные объе*******ты (например, числа или стро*******и).
Производители работают параллельно.
Обработчи*******и:

Обработчи*******и берут данные из буфера производителей, обрабатывают их (например, умножают числа на случайное значение или преобразуют стро*******и).
После обработ*******и данные передаются в другой общий буфер, *******оторый используется потребителями.
Обработчи*******и работают параллельно.
Потребители:

Потребители берут обработанные данные из буфера обработчи*******ов и записывают их в финальный списо******* (например, для сохранения в базе данных или вывода в *******онсоль).
Потребители работают параллельно.
Синхронизация:

Для взаимодействия между производителями, обработчи*******ами и потребителями используйте бло*******иров*******и, Monitor, Mutex или Semaphore для обеспечения *******орре*******тного взаимодействия пото*******ов с общими буферами.
Используйте объе*******ты синхронизации, та*******ие *******а******* AutoResetEvent или ManualResetEvent, чтобы потребители не пытались обработать данные, если буфер пуст.
Останов системы:

Программа должна завершать работу *******орре*******тно. После останов*******и (например, по сигналу от пользователя) все пото*******и должны завершиться, при этом все данные должны быть обработаны до *******онца.
Реализуйте механизм плавного завершения всех пото*******ов после того, *******а******* все данные будут переданы от производителей ******* потребителям.



Буферы:

Реализуйте два общих буфера для данных: один для передачи от производителей ******* обработчи*******ам и второй — от обработчи*******ов ******* потребителям. Для синхронизации доступа ******* буферам используйте механизмы синхронизации.
Производство данных:

Пусть *******аждый производитель генерирует данные с задерж*******ой в 500–1000 миллисе*******унд.
Например, производители могут генерировать числа от 1 до 100 или стро*******и.
Обработ*******а данных:

Обработчи*******и должны брать данные из первого буфера, выполнять обработ*******у (например, увеличить число на случайное значение от 1 до 10 или преобразовать стро*******у), а затем передавать обработанные данные во второй буфер.
Задерж*******а обработ*******и может составлять 200–500 миллисе*******унд.
Запись данных:

Потребители берут данные из второго буфера и выводят их в *******онсоль с у*******азанием времени обработ*******и.



Добавьте возможность паузы и возобновления системы по *******оманде пользователя (pause, resume).
Реализуйте возможность мониторинга состояния системы, чтобы пользователь мог запросить те*******ущ******* *******оличество данных на *******аждом этапе обработ*******и (например, с*******оль*******о данных сейчас в *******аждом буфере).
Реализуйте обработ*******у ошибо******* (например, если буфер переполнен, данные должны временно не передаваться).
